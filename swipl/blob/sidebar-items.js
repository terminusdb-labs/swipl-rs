window.SIDEBAR_ITEMS = {"fn":[["acquire_arc_blob","Increment the reference count on an Arc stored in a blob."],["create_blob_definition","Create a blob definition for use with the SWI-Prolog fli out of the given components."],["get_arc_from_term","Retrieve an arc from the given term, using the given blob definition."],["get_cloned_from_term","Retrieve a cloneable value from the given term, using the given blob definition."],["put_arc_in_term","Put an arc into the given term, using the given blob definition."],["put_cloneable_in_term","Put a Cloneable into the given term, using the given blob definition."],["release_arc_blob","Decrement the reference count on an Arc stored in a blob."],["release_clone_blob","Drop the rust value stored in a blob."],["unify_with_arc","Unify the term with the given `Arc`, using the given blob definition to do so."],["unify_with_cloneable","Unify the term with the given Cloneable, using the given blob definition to do so."]],"trait":[["ArcBlob","A blob type whose data is shared with SWI-Prolog as an atomic reference-counted pointer."],["ArcBlobBase","Base type for [ArcBlob]."],["ArcBlobImpl","Supertype of [ArcBlob] that allows implementation of `compare` and `write`."],["CloneBlob","A blob type whose data is copied into SWI-Prolog and dropped on garbage collection."],["CloneBlobBase","Base type for [CloneBlob]."],["CloneBlobImpl","Supertype of [CloneBlob] that allows implementation of `compare` and `write`."],["WrappedArcBlob","A blob type whose data is shared with SWI-Prolog as an atomic reference-counted pointer, and which is wrapped into a wrapper type."],["WrappedArcBlobBase","Base type for [WrappedArcBlob]."],["WrappedArcBlobImpl","Supertype of [WrappedArcBlob] that allows implementation of `compare` and `write`."]]};