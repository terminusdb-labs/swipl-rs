initSidebarItems({"attr":[["arc_blob","Define an arc blob."],["clone_blob","Define a clone blob."]],"macro":[["atom","Create a static atom."],["functor","Create a static functor."],["pred","Generate an inline callable predicate."],["predicates","Define foreign predicates written in rust for use in prolog."],["prolog","Define prolog predicates to be used from rust code."],["term","Generate a term from a rust expression."],["term_getable","Easily implement [TermGetable]."],["term_putable","Easily implement [TermPutable]."],["unifiable","Easily implement [Unifiable]."],["wrapped_arc_blob","Define a wrapped arc blob."],["wrapped_clone_blob","Define a wrapped clone blob."]],"mod":[["atom","Prolog atoms."],["blob","Blob support."],["callable","Support for calling into prolog or prolog-like code."],["consts","Constants."],["context","Prolog contexts."],["dict","Prolog dictionaries."],["engine","Prolog engines."],["fli","Re-export of the swipl-fli crate."],["functor","Prolog functors."],["init","Prolog initialization logic."],["module","Prolog modules."],["predicate","Prolog predicates."],["prelude","Module which re-exports all public symbols in this crate, for easy importing."],["record","Records - prolog terms in heap storage."],["result","Prolog results."],["stream","Prolog streams."],["term","Prolog terms."],["text","Support for easy text extraction from prolog."]]});